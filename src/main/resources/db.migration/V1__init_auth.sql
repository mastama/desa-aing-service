-- ========== Extensions ==========
-- bcrypt via pgcrypto (untuk seeding user awal)
CREATE EXTENSION IF NOT EXISTS pgcrypto;

-- ========== Tables ==========
CREATE TABLE roles (
                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       name VARCHAR(64) NOT NULL UNIQUE,
                       description VARCHAR(255)
);

CREATE TABLE users (
                       id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       full_name     VARCHAR(150) NOT NULL,
                       username      VARCHAR(100) NOT NULL,
                       email         VARCHAR(150) NOT NULL,
                       password_hash VARCHAR(200) NOT NULL,
                       phone_number  VARCHAR(32),
                       status        VARCHAR(32)  NOT NULL DEFAULT 'ACTIVE',      -- ACTIVE/LOCKED/...
                       created_at    TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
                       updated_at    TIMESTAMPTZ  NOT NULL DEFAULT NOW(),
                       version       BIGINT       NOT NULL DEFAULT 0
    -- jika ingin strict: ,CONSTRAINT users_status_chk CHECK (status IN ('ACTIVE','LOCKED','PENDING_VERIFICATION'))
);

CREATE TABLE user_roles (
                            user_id BIGINT NOT NULL REFERENCES users(id) ON DELETE CASCADE,
                            role_id BIGINT NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
                            PRIMARY KEY (user_id, role_id)
);

-- ========== Indexes ==========
-- Case-insensitive uniqueness utk username & email (selaras dengan query lower(...) di repo)
CREATE UNIQUE INDEX uq_users_username_ci ON users (LOWER(username));
CREATE UNIQUE INDEX uq_users_email_ci    ON users (LOWER(email));

-- Opsional index tambahan
CREATE INDEX idx_users_status      ON users (status);
CREATE INDEX idx_users_created_at  ON users (created_at);
CREATE INDEX idx_user_roles_role   ON user_roles (role_id);

-- ========== Triggers ==========
CREATE OR REPLACE FUNCTION set_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at := NOW();
RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_users_updated_at
    BEFORE UPDATE ON users
    FOR EACH ROW
    EXECUTE FUNCTION set_updated_at();

-- ========== Seed: Roles ==========
INSERT INTO roles(name, description) VALUES
                                         ('SUPER_ADMIN',    'Super administrator'),
                                         ('KEPALA_DESA',    'Pimpinan desa'),
                                         ('SEKRETARIS_DESA','Sekretaris desa'),
                                         ('BENDAHARA',      'Bendahara'),
                                         ('KETUA_RW',       'Ketua RW'),
                                         ('KETUA_RT',       'Ketua RT'),
                                         ('PERANGKAT_DESA', 'Perangkat desa'),
                                         ('KARANG_TARUNA',  'Karang Taruna'),
                                         ('PKK',            'PKK'),
                                         ('USER',           'Pengguna biasa')
    ON CONFLICT (name) DO NOTHING;

-- ========== Seed: 1 User Super Admin ==========
-- Password: ganti sesuai kebutuhan. Contoh di bawah memakai bcrypt via pgcrypto:
-- crypt('Admin@123', gen_salt('bf', 12)) -> menghasilkan hash $2a$...
INSERT INTO users(full_name, username, email, password_hash, phone_number, status)
VALUES ('Super Admin', 'superadmin', 'superadmin@example.com',
        crypt('Admin@123', gen_salt('bf', 12)),
        '080000000000', 'ACTIVE')
    ON CONFLICT DO NOTHING;

-- Assign role SUPER_ADMIN + USER ke superadmin
INSERT INTO user_roles(user_id, role_id)
SELECT u.id, r.id
FROM users u
         JOIN roles r ON r.name IN ('SUPER_ADMIN', 'USER')
WHERE u.username = 'superadmin'
    ON CONFLICT DO NOTHING;